<template>
  <view class="content">
    <z-paging
      :show-empty-view-reload="true"
      ref="paging"
      v-model="dataList"
      @query="queryList"
      :fixed="false"
      :auto="false"
    >
      <view
        class="item"
        v-for="(item, index) in dataList"
        :key="item.id"
        @click="toWatchLive(item)"
      >
        <view class="top">
          <image :src="item.liveCover" mode="scaleToFill" />
          <view class="wrap"></view>
          <view class="top-text">
            <view class="top-title">
              <u-tag text="视频" size="mini"></u-tag>
              <text>{{ item.title }}</text>
            </view>
            <view class="top-tag">
              <text class="live-end">直播中</text>
              <image
                src="../../static/icon_living.png"
                mode="aspectFit"
              ></image>
            </view>
          </view>
        </view>
        <view class="bom">
          <view class="user">
            <image :src="userInfo.ico" mode="scaleToFill" />
            <text>{{ item.mname }}</text>
            <view>{{ item.rewardType == 1 ? "红包奖励" : "积分奖励" }}</view>
          </view>
          <view class="share" @click.stop="submitToShare(item)">
            <image src="@/static/icon_share.png" mode="aspectFit" />
            <text>分享</text>
          </view>
        </view>
      </view>
    </z-paging>
  </view>
</template>

<script>
import { doQueryLiveList } from "../../api/live";
export default {
  props: {
    type: {
      type: [Number, String],
      default: function () {
        return "";
      },
    },
    shareCode: {
      type: String,
    },
    // 当前组件是第几个index
    tabIndex: {
      type: Number,
      default: function () {
        return 0;
      },
    },
    //当前swiper切换到第几个index
    currentIndex: {
      type: Number,
      default: function () {
        return 0;
      },
    },
  },
  watch: {
    currentIndex: {
      handler(newVal) {
        if (newVal === this.tabIndex) {
          //懒加载，当滑动到当前的item时，才去加载
          if (!this.firstLoaded) {
            setTimeout(() => {
              this.$refs.paging.reload();
            }, 100);
          }
        }
      },
      immediate: true,
    },
  },
  data() {
    return {
      dataList: [],
      userInfo: getApp().globalData.userInfo,
      firstLoaded: false,
      liveData: {},
    };
  },
  created() {},
  methods: {
    submitToShare(item) {
      let qurey = `query=${encodeURIComponent(
        JSON.stringify({ id: item.id, shareCode: this.shareCode })
      )}`;
      const href =
        item.showType == 0
          ? `${this.$baseUrl}#/pages/live/half?${qurey}`
          : `${this.$baseUrl}#/pages/live/full?${qurey}`;
      this.$emit("submitToShare", {
        href: href,
        title: item.title,
        liveCover: item.liveCover,
      });
    },
    queryList(pageNo, pageSize) {
      this.query = { pageNo, pageSize, type: this.type, states: 1 };
      //这里的pageNo和pageSize会自动计算好，直接传给服务器即可
      //这里的请求只是演示，请替换成自己的项目的网络请求，并在网络请求回调中通过this.$refs.paging.complete(请求回来的数组)将请求结果传给z-paging
      doQueryLiveList(this.query)
        .then((res) => {
          //请勿在网络请求回调中给dataList赋值！！只需要调用complete就可以了
          console.log(res);
          this.$refs.paging.complete(res.data.datas);
          this.firstLoaded = true;
        })
        .catch((res) => {
          //如果请求失败写this.$refs.paging.complete(false)，会自动展示错误页面
          //注意，每次都需要在catch中写这句话很麻烦，z-paging提供了方案可以全局统一处理
          //在底层的网络请求抛出异常时，写uni.$emit('z-paging-error-emit');即可
          this.$refs.paging.complete(false);
        });
    },
    // showType  直播方式： 0.横屏直播 1.竖屏直播
    toWatchLive(liveRoom) {
      let showType = liveRoom.showType;
      let url;
      this.$store.commit("setLiveRoom", {
        liveData: liveRoom,
      });
      if (showType == 0) {
        this.$Router.push({
          name: "half",
          params: { id: liveRoom.id, shareCode: this.shareCode },
        });
      } else {
        this.$Router.push({
          name: "full",
          params: { id: liveRoom.id, shareCode: this.shareCode },
        });
      }
    },
  },
};
</script>

<style lang="scss" scoped>
.content {
  height: 100%;
}
.item {
  width: 710rpx;
  margin: 15rpx auto;
  background-color: #fff;
  border-radius: 10rpx;
  overflow: hidden;
  box-shadow: 0 0 10rpx 2rpx rgba($color: #000000, $alpha: 0.5);
  .top {
    width: 100%;
    height: 400rpx;
    position: relative;
    padding: 25rpx;
    > image {
      width: 100%;
      height: 100%;
      position: absolute;
      top: 0;
      left: 0;
    }
    .wrap {
      width: 100%;
      height: 100%;
      background: rgba($color: #000000, $alpha: 0.5);
      top: 0;
      left: 0;
      position: absolute;
    }
    .top-text {
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      .top-title {
        flex-direction: row;
        text {
          margin-left: 20rpx;
          color: #fff;
        }
      }
      .top-tag {
        width: 140rpx;
        height: 48rpx;
        border-radius: 10rpx;
        background: #fc524b;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 0 15rpx;
        text {
          font-size: 24rpx;
          color: #fff;
        }
        image {
          width: 24rpx;
          height: 24rpx;
        }
      }
    }
  }
  .bom {
    width: 100%;
    height: 120rpx;
    align-items: center;
    padding: 0 25rpx;
    justify-content: space-between;
    flex-direction: row;
    .user,
    .share {
      flex-direction: row;
      align-items: center;
      image {
        width: 60rpx;
        height: 60rpx;
        border-radius: 50%;
        margin-right: 20rpx;
      }
      text {
        font-size: 30rpx;
        color: #000;
      }
      view {
        width: 140rpx;
        height: 48rpx;
        border-radius: 8rpx;
        border: 2rpx solid #fc524b;
        color: #fc524b;
        text-align: center;
        line-height: 48rpx;
        margin-left: 20rpx;
        font-size: 24rpx;
      }
    }
    .share {
      image {
        width: 36rpx;
        height: 34rpx;
        border-radius: 0;
      }
    }
  }
}
</style>
